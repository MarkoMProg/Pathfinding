import { PathRequestDto } from "../dto/path-request.dto";

export const basicGraphRequest: PathRequestDto = {
  start: "A",
  end: "L",
  nodes: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"],
  edges: [
    { from: "A", to: "B", cost: 2 },
    { from: "A", to: "C", cost: 4 },
    { from: "B", to: "D", cost: 7 },
    { from: "B", to: "E", cost: 3 },
    { from: "C", to: "F", cost: 5 },
    { from: "D", to: "G", cost: 2 },
    { from: "E", to: "G", cost: 1 },
    { from: "F", to: "H", cost: 2 },
    { from: "G", to: "I", cost: 4 },
    { from: "H", to: "I", cost: 1 },
    { from: "I", to: "J", cost: 3 },
    { from: "J", to: "K", cost: 2 },
    { from: "K", to: "L", cost: 1 },
    { from: "H", to: "J", cost: 4 },
    { from: "E", to: "F", cost: 3 },
    { from: "C", to: "E", cost: 2 },
  ],
  constraints: {
    blockedNodes: ["G", "D"],
    requiredStops: ["E", "H"],
  },
};

export const invalidPathRequest: PathRequestDto = {
  start: "A",
  end: "L",
  nodes: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"],
  edges: [
    { from: "A", to: "B", cost: 2 },
    { from: "B", to: "C", cost: 3 },
  ],
  constraints: {
    blockedNodes: ["B"],
    requiredStops: ["C"],
  },
};

export const complexGraphRequest: PathRequestDto = {
  start: "A",
  end: "T",
  nodes: [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
  ],
  edges: [
    { from: "A", to: "B", cost: 3 },
    { from: "A", to: "C", cost: 4 },
    { from: "B", to: "D", cost: 2 },
    { from: "B", to: "E", cost: 5 },
    { from: "C", to: "F", cost: 3 },
    { from: "C", to: "G", cost: 4 },
    { from: "D", to: "H", cost: 6 },
    { from: "E", to: "I", cost: 2 },
    { from: "F", to: "J", cost: 3 },
    { from: "G", to: "K", cost: 5 },
    { from: "H", to: "L", cost: 4 },
    { from: "I", to: "M", cost: 3 },
    { from: "J", to: "N", cost: 2 },
    { from: "K", to: "O", cost: 4 },
    { from: "L", to: "P", cost: 3 },
    { from: "M", to: "Q", cost: 5 },
    { from: "N", to: "R", cost: 2 },
    { from: "O", to: "S", cost: 3 },
    { from: "P", to: "T", cost: 4 },
    { from: "Q", to: "T", cost: 3 },
    { from: "R", to: "T", cost: 5 },
    { from: "S", to: "T", cost: 2 },
    { from: "B", to: "F", cost: 4 },
    { from: "C", to: "E", cost: 3 },
    { from: "D", to: "G", cost: 5 },
    { from: "E", to: "H", cost: 2 },
    { from: "F", to: "I", cost: 4 },
    { from: "G", to: "J", cost: 3 },
    { from: "H", to: "K", cost: 2 },
    { from: "I", to: "L", cost: 5 },
    { from: "J", to: "M", cost: 3 },
    { from: "K", to: "N", cost: 4 },
    { from: "L", to: "O", cost: 2 },
    { from: "M", to: "P", cost: 3 },
    { from: "N", to: "Q", cost: 5 },
    { from: "O", to: "R", cost: 2 },
    { from: "P", to: "S", cost: 4 },
    { from: "Q", to: "R", cost: 3 },
    { from: "R", to: "S", cost: 2 },
  ],
  constraints: {
    blockedNodes: ["G", "K", "P"],
    requiredStops: ["E", "I", "M", "Q"],
  },
};
